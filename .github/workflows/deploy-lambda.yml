name: Deploy to AWS Lambda

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write   # This is required for OIDC authentication
  contents: read    # This is required to checkout the repository
env:
  AWS_REGION: ${{secrets.AWS_REGION }}
  LAMBDA_FUNCTION_NAME: ${{secrets.LAMBDA_FUNCTION_NAME}}
  LAMBDA_HANDLER: ${{secrets.LAMBDA_HANDLER }}
  API_ID: ${{secrets.API_ID}}
  RESOURCE_ID: ${{secrets.RESOUCE_ID}}
  HTTP_METHOD: ${{secrets.HTTP_METHOD}}


jobs:
  build-test-and-deploy:
    name: Build, Test, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      # --- CI Step 1: Setup Node.js Environment ---
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x' # Match your Lambda runtime (nodejs22.x)
          cache: 'npm' # Cache npm dependencies for faster builds

      # --- CI Step 2: Install Dependencies ---
      - name: Install Dependencies
        run: npm ci # Use 'ci' for reproducible builds

      # --- CI Step 3: Build Project ---
      - name: Build NestJS Project
        run: npm run build --if-present # Build TypeScript to JavaScript

      # --- CI Step 4: Run Tests (From official CI example) ---
      # This is the step you asked about.
      # If tests fail, the workflow will stop here and not deploy.
      - name: Run Tests
        run: npm test

      # --- CD Step 1: Prepare Lambda Artifact (Package production code) ---
      - name: Package Lambda Artifact
        run: |
          echo "Copying package.json and package-lock.json to dist..."
          cp package.json package-lock.json dist/
          echo "Entering dist directory..."
          cd dist
          echo "Installing ONLY production dependencies..."
          npm ci --production # Install only 'dependencies', not 'devDependencies'
          echo "Packaging complete."

      # --- CD Step 2: Configure AWS Credentials ---
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} # OIDC Role ARN
          aws-region: ${{ env.AWS_REGION }}

      # --- CD Step 3: Deploy to AWS Lambda ---
      - name: Deploy Lambda Function
        uses: aws-actions/aws-lambda-deploy@v1.1.0 # (Note: This is an older action, consider aws-actions/aws-lambda-deploy-function@v1)
        with:
          function-name: ${{ env.LAMBDA_FUNCTION_NAME }}
          code-artifacts-dir: dist # Deploy the 'dist' folder
          handler: ${{ env.LAMBDA_HANDLER }}
          runtime: nodejs22.x

      # --- CD Step 4: Configure API Gateway Integration ---
      - name: Configure API Gateway Integration
        run: |
          LAMBDA_ARN_BASE="arn:aws:lambda:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:${{ env.LAMBDA_FUNCTION_NAME }}"
          STATEMENT_ID="ApiGatewayInvoke"
          SOURCE_ARN="arn:aws:execute-api:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:${{ env.API_ID }}/*/*/*"

        # 1. 기존 권한 제거 (에러 해결)
        # GetPolicy 명령을 사용해 권한이 있는지 확인하고, 있다면 제거합니다.
        # 🚨 주의: jq 도구가 설치되어 있어야 합니다 (ubuntu-latest 에는 기본 설치됨).
          if aws lambda get-policy --function-name ${{ env.LAMBDA_FUNCTION_NAME }} | grep -q "$STATEMENT_ID"; then
              echo "Existing permission found. Removing it now."
              aws lambda remove-permission \
                  --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
                  --statement-id "$STATEMENT_ID"
          fi

        # 2. 새로운 Lambda 호출 권한 부여
        # 제거 후 다시 추가하여 항상 최신 상태를 유지합니다.
          aws lambda add-permission \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --statement-id "$STATEMENT_ID" \
            --action "lambda:InvokeFunction" \
            --principal "apigateway.amazonaws.com" \
            --source-arn "$SOURCE_ARN"     
          
        # 3. API Gateway 통합 설정 (apigateway:put-integration)
        # API Gateway의 특정 경로/메서드에 Lambda를 연결합니다.
          INTEGRATION_URI="arn:aws:apigateway:${{ env.AWS_REGION }}:lambda:path/2015-03-31/functions/arn:aws:lambda:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:${{ env.LAMBDA_FUNCTION_NAME }}/invocations"

        # API Gateway에 설정된 Resource ID와 HTTP Method를 사용
          aws apigateway put-integration \
          --rest-api-id ${{ env.API_ID }} \
          --resource-id ${{ env.RESOURCE_ID }} \
          --http-method ${{ env.HTTP_METHOD }} \
          --type AWS_PROXY \
          --integration-http-method POST \
          --uri "$INTEGRATION_URI"
        # 4. API Gateway 배포 (apigateway:create-deployment)
        # 변경된 통합 설정을 적용하기 위해 반드시 재배포해야 합니다.
          aws apigateway create-deployment \
            --rest-api-id ${{ env.API_ID }} \
            --stage-name 'prod' \
            --stage-description 'Deployed by GitHub Actions' \
            --stage-description 'GitHub Actions Deployment'